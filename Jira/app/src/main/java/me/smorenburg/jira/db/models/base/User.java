package me.smorenburg.jira.db.models.base;

import org.greenrobot.greendao.DaoException;
import org.greenrobot.greendao.annotation.Entity;
import org.greenrobot.greendao.annotation.Generated;
import org.greenrobot.greendao.annotation.Id;
import org.greenrobot.greendao.annotation.ToMany;
import org.greenrobot.greendao.annotation.Unique;

import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "USER".
 */
@Entity
public class User extends me.smorenburg.jira.db.core.DbBaseModel {

    @Id(autoincrement = true)
    @Unique
    private Long id;
    private String name;
    private String lname;

    @Unique
    private String username;
    private String password;

    @ToMany(referencedJoinProperty = "user_id")
    private List<User_Authorities> user_authorities;

    @ToMany(referencedJoinProperty = "user_id")
    private List<User_Skills> user_skillses;

    @ToMany(referencedJoinProperty = "user_id")
    private List<Task> tasks;

    /**
     * Used to resolve relations
     */
    @Generated(hash = 2040040024)
    private transient DaoSession daoSession;
    /**
     * Used for active entity operations.
     */
    @Generated(hash = 1507654846)
    private transient UserDao myDao;


    @Generated(hash = 1691202964)
    public User(Long id, String name, String lname, String username,
                String password) {
        this.id = id;
        this.name = name;
        this.lname = lname;
        this.username = username;
        this.password = password;
    }

    @Generated(hash = 586692638)
    public User() {
    }


    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getLname() {
        return lname;
    }

    public void setLname(String lname) {
        this.lname = lname;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    /**
     * To-many relationship, resolved on first access (and after reset).
     * Changes to to-many relations are not persisted, make changes to the target entity.
     */
    @Generated(hash = 2133061625)
    public List<User_Authorities> getUser_authorities() {
        if (user_authorities == null) {
            final DaoSession daoSession = this.daoSession;
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            User_AuthoritiesDao targetDao = daoSession.getUser_AuthoritiesDao();
            List<User_Authorities> user_authoritiesNew = targetDao
                    ._queryUser_User_authorities(id);
            synchronized (this) {
                if (user_authorities == null) {
                    user_authorities = user_authoritiesNew;
                }
            }
        }
        return user_authorities;
    }

    /**
     * Resets a to-many relationship, making the next get call to query for a fresh result.
     */
    @Generated(hash = 427933602)
    public synchronized void resetUser_authorities() {
        user_authorities = null;
    }

    /**
     * To-many relationship, resolved on first access (and after reset).
     * Changes to to-many relations are not persisted, make changes to the target entity.
     */
    @Generated(hash = 124483900)
    public List<User_Skills> getUser_skillses() {
        if (user_skillses == null) {
            final DaoSession daoSession = this.daoSession;
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            User_SkillsDao targetDao = daoSession.getUser_SkillsDao();
            List<User_Skills> user_skillsesNew = targetDao
                    ._queryUser_User_skillses(id);
            synchronized (this) {
                if (user_skillses == null) {
                    user_skillses = user_skillsesNew;
                }
            }
        }
        return user_skillses;
    }

    /**
     * Resets a to-many relationship, making the next get call to query for a fresh result.
     */
    @Generated(hash = 1724516809)
    public synchronized void resetUser_skillses() {
        user_skillses = null;
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 128553479)
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 1942392019)
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 713229351)
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /**
     * To-many relationship, resolved on first access (and after reset).
     * Changes to to-many relations are not persisted, make changes to the target entity.
     */
    @Generated(hash = 1242973320)
    public List<Task> getTasks() {
        if (tasks == null) {
            final DaoSession daoSession = this.daoSession;
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TaskDao targetDao = daoSession.getTaskDao();
            List<Task> tasksNew = targetDao._queryUser_Tasks(id);
            synchronized (this) {
                if (tasks == null) {
                    tasks = tasksNew;
                }
            }
        }
        return tasks;
    }

    /**
     * Resets a to-many relationship, making the next get call to query for a fresh result.
     */
    @Generated(hash = 668181820)
    public synchronized void resetTasks() {
        tasks = null;
    }

    @Override
    public String toString() {
        return name + " " + lname + " (" + username + ")";
    }

    public boolean isAdmin() {
        for (User_Authorities user_authorities : daoSession.getUserDao().load(id).getUser_authorities()) {
            if (user_authorities.getAuthority().getAuthority_name().equalsIgnoreCase("ROLE_ADMIN"))
                return true;
        }
        return false;
    }

    public Long getTasksTotalDuration() {
        Long finalDurationTotal = 0L;
        for (Task task : daoSession.getUserDao().load(id).getTasks()) {
            finalDurationTotal+=task.getTaskDuration();
        }
        return finalDurationTotal;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated(hash = 2059241980)
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUserDao() : null;
    }
}
