package me.smorenburg.jira.db.models.base;

import org.greenrobot.greendao.annotation.Entity;
import org.greenrobot.greendao.annotation.Id;
import org.greenrobot.greendao.annotation.ToOne;
import org.greenrobot.greendao.annotation.Generated;
import org.greenrobot.greendao.DaoException;
import org.greenrobot.greendao.annotation.NotNull;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "AUTHORITY__USER__ROLES".
 */
@Entity
public class User_Authorities extends me.smorenburg.jira.db.core.DbBaseModel  {

    @Id(autoincrement = true)
    private Long id;

    private long authority_id;
    private long user_id;

    @ToOne(joinProperty = "user_id")
    private User user;

    @ToOne(joinProperty = "authority_id")
    private Authority authority;

    /** Used to resolve relations */
    @Generated(hash = 2040040024)
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated(hash = 870805945)
    private transient User_AuthoritiesDao myDao;

    @Generated(hash = 1794812879)
    public User_Authorities(Long id, long authority_id, long user_id) {
        this.id = id;
        this.authority_id = authority_id;
        this.user_id = user_id;
    }

    @Generated(hash = 2058776075)
    public User_Authorities() {
    }

    public Long getId() {
        return this.id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getAuthority_id() {
        return this.authority_id;
    }

    public void setAuthority_id(long authority_id) {
        this.authority_id = authority_id;
    }

    public long getUser_id() {
        return this.user_id;
    }

    public void setUser_id(long user_id) {
        this.user_id = user_id;
    }

    @Generated(hash = 251390918)
    private transient Long user__resolvedKey;

    /** To-one relationship, resolved on first access. */
    @Generated(hash = 192352032)
    public User getUser() {
        long __key = this.user_id;
        if (user__resolvedKey == null || !user__resolvedKey.equals(__key)) {
            final DaoSession daoSession = this.daoSession;
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            User userNew = targetDao.load(__key);
            synchronized (this) {
                user = userNew;
                user__resolvedKey = __key;
            }
        }
        return user;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated(hash = 864817587)
    public void setUser(@NotNull User user) {
        if (user == null) {
            throw new DaoException(
                    "To-one property 'user_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.user = user;
            user_id = user.getId();
            user__resolvedKey = user_id;
        }
    }

    @Generated(hash = 1241758749)
    private transient Long authority__resolvedKey;

    /** To-one relationship, resolved on first access. */
    @Generated(hash = 1707509402)
    public Authority getAuthority() {
        long __key = this.authority_id;
        if (authority__resolvedKey == null
                || !authority__resolvedKey.equals(__key)) {
            final DaoSession daoSession = this.daoSession;
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AuthorityDao targetDao = daoSession.getAuthorityDao();
            Authority authorityNew = targetDao.load(__key);
            synchronized (this) {
                authority = authorityNew;
                authority__resolvedKey = __key;
            }
        }
        return authority;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated(hash = 1450160291)
    public void setAuthority(@NotNull Authority authority) {
        if (authority == null) {
            throw new DaoException(
                    "To-one property 'authority_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.authority = authority;
            authority_id = authority.getId();
            authority__resolvedKey = authority_id;
        }
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 128553479)
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 1942392019)
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 713229351)
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated(hash = 895094138)
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUser_AuthoritiesDao() : null;
    }

}
