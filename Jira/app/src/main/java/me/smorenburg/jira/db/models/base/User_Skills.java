package me.smorenburg.jira.db.models.base;

import org.greenrobot.greendao.annotation.Entity;
import org.greenrobot.greendao.annotation.Id;
import org.greenrobot.greendao.annotation.ToOne;
import org.greenrobot.greendao.annotation.Generated;
import org.greenrobot.greendao.DaoException;
import org.greenrobot.greendao.annotation.NotNull;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "AUTHORITY__USER__ROLES".
 */
@Entity
public class User_Skills extends me.smorenburg.jira.db.core.DbBaseModel {

    @Id(autoincrement = true)
    private Long id;

    private long skill_id;
    private long user_id;

    @ToOne(joinProperty = "skill_id")
    private Skill skill;

    @ToOne(joinProperty = "user_id")
    private User user;

    /** Used to resolve relations */
    @Generated(hash = 2040040024)
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated(hash = 46281419)
    private transient User_SkillsDao myDao;

    @Generated(hash = 1583575894)
    public User_Skills(Long id, long skill_id, long user_id) {
        this.id = id;
        this.skill_id = skill_id;
        this.user_id = user_id;
    }

    @Generated(hash = 1615971576)
    public User_Skills() {
    }

    public Long getId() {
        return this.id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getSkill_id() {
        return this.skill_id;
    }

    public void setSkill_id(long skill_id) {
        this.skill_id = skill_id;
    }

    public long getUser_id() {
        return this.user_id;
    }

    public void setUser_id(long user_id) {
        this.user_id = user_id;
    }

    @Generated(hash = 1240828227)
    private transient Long skill__resolvedKey;

    /** To-one relationship, resolved on first access. */
    @Generated(hash = 1296106806)
    public Skill getSkill() {
        long __key = this.skill_id;
        if (skill__resolvedKey == null || !skill__resolvedKey.equals(__key)) {
            final DaoSession daoSession = this.daoSession;
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SkillDao targetDao = daoSession.getSkillDao();
            Skill skillNew = targetDao.load(__key);
            synchronized (this) {
                skill = skillNew;
                skill__resolvedKey = __key;
            }
        }
        return skill;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated(hash = 1978298358)
    public void setSkill(@NotNull Skill skill) {
        if (skill == null) {
            throw new DaoException(
                    "To-one property 'skill_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.skill = skill;
            skill_id = skill.getId();
            skill__resolvedKey = skill_id;
        }
    }

    @Generated(hash = 251390918)
    private transient Long user__resolvedKey;

    /** To-one relationship, resolved on first access. */
    @Generated(hash = 192352032)
    public User getUser() {
        long __key = this.user_id;
        if (user__resolvedKey == null || !user__resolvedKey.equals(__key)) {
            final DaoSession daoSession = this.daoSession;
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            User userNew = targetDao.load(__key);
            synchronized (this) {
                user = userNew;
                user__resolvedKey = __key;
            }
        }
        return user;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated(hash = 864817587)
    public void setUser(@NotNull User user) {
        if (user == null) {
            throw new DaoException(
                    "To-one property 'user_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.user = user;
            user_id = user.getId();
            user__resolvedKey = user_id;
        }
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 128553479)
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 1942392019)
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 713229351)
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated(hash = 1520160459)
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUser_SkillsDao() : null;
    }

}
